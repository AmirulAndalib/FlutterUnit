; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

; Reference: https://juejin.cn/post/7108928269285589000
; Document: https://jrsoftware.org/ishelp/

#define WindowsProjectDir "..\..\windows"
#define WindowsReleaseDir "..\..\build\windows\x64\runner\Release"
#define OutputDir "..\output"

#define MyAppName "FlutterUnit"
#define AppPublisher "toly1994.com"
#define MyAppURL "https://www.toly1994.com"
#define MyAppExeName "flutter_unit.exe"
#define MyAppAssocName MyAppName + " File"

#define MyAppAssocExt ".myp"
#define MyAppAssocKey StringChange(MyAppAssocName, " ", "") + MyAppAssocExt
#ifndef Version
  #define Version "1.0.0"
#endif

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{48BCE972-86A2-4CA3-8B0A-A872C0391C84}}
AppName={#MyAppName}
AppVersion={#Version}
AppPublisher={#AppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
;DefaultDirName={autopf}\{#MyAppName}
DefaultDirName={drive:Path}\Software\{#MyAppName}
ChangesAssociations=yes
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputDir= {#OutputDir}
OutputBaseFilename={#MyAppName}
SetupIconFile={#WindowsProjectDir}\runner\resources\app_icon.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern
PrivilegesRequired=admin
UsePreviousAppDir=false

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}";
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}";

[Files]
Source: "{#WindowsReleaseDir}\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#WindowsReleaseDir}\*.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#WindowsReleaseDir}\data\*"; DestDir: "{app}\data"; Flags: ignoreversion recursesubdirs createallsubdirs

[Registry]
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocExt}\OpenWithProgids"; ValueType: string; ValueName: "{#MyAppAssocKey}"; ValueData: ""; Flags: uninsdeletevalue
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}"; ValueType: string; ValueName: ""; ValueData: "{#MyAppAssocName}"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppExeName},0"
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1"""
Root: HKA; Subkey: "Software\Classes\Applications\{#MyAppExeName}\SupportedTypes"; ValueType: string; ValueName: ".myp"; ValueData: ""

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: quicklaunchicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[code]
function InitializeSetup(): Boolean;
var
  result1:   Integer;
begin
  ShellExec('', 'cmd.exe', 'cmd /c taskkill /f /im {#MyAppExeName}', '', SW_HIDE,  ewWaitUntilTerminated, result1);
  Result := True;
end;

function FileExist(file: string): Boolean;
  begin
    if (FileExists(file)) then
      begin
        Result := True;
      end
    else
      begin
        Result := False;
      end;
  end;

// remove icons cache if necessary
function RemoveIconCache(): Boolean;
  var 
    IconCache: String;
  begin
    IconCache := ExpandConstant('{localappdata}\IconCache.db');
    if FileExist(IconCache) then
      begin
        DeleteFile(IconCache);
      end;
     Result := True; 
  end;

procedure InitializeWizard;
var
  UserStartMenuPath: String;
  CommonStartMenuPath: String;
begin
  //// delete directory
  // DelTree(ExpandConstant('{app}\platform'), True, True, True);
  //// delete file
  // DeleteFile(ExpandConstant('{userstartmenu}\Programs\uhomespro.lnk'));
  
  // MsgBox('App start menu path is: ' + ExpandConstant('{userstartmenu}'), mbError, MB_OK);
  Log('App start menu path is: ' + ExpandConstant('{userstartmenu}'));

  // delete start menu link
  UserStartMenuPath := ExpandConstant('{userstartmenu}\Programs\uhomespro.lnk');
  if FileExist(UserStartMenuPath) then
    begin
      DeleteFile(UserStartMenuPath);
    end;
  CommonStartMenuPath := ExpandConstant('{commonstartmenu}\Programs\uhomespro.lnk');
  if FileExist(CommonStartMenuPath) then
    begin
      DeleteFile(CommonStartMenuPath);
    end;
  // remove system icon cache
  RemoveIconCache();
  
  // ResultStr := RemoveQuotes(ResultStr);
  // Exec(ResultStr, '/silent', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
end;

procedure DeinitializeSetup;
var
  PreviousProgramInstallPath: String;
  PreviousProgramInstallExe: String;

begin
  // clean previous program installed files, call in DeinitializeSetup lifecycle method to avoid system permission error.
  PreviousProgramInstallPath := ExpandConstant('C:\Program\{#MyAppName}');
  PreviousProgramInstallExe := ExpandConstant(PreviousProgramInstallPath + '\{#MyAppExeName}');
  Log('The previous program install path is: ' + PreviousProgramInstallPath);
  // MsgBox('The previous program install path is: ' + PreviousProgramInstallPath, mbError, MB_OK);
  if FileExist(PreviousProgramInstallExe) then
  begin
    DelTree(PreviousProgramInstallPath, True, True, True);
  end;
end;





